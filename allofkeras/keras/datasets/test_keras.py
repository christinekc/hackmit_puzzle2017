# MLP for Pima Indians Dataset Serialize to JSON and HDF5
from __future__ import print_function

from keras.models import Sequential
from keras.layers import Dense
from keras.models import model_from_json
from keras.utils import np_utils, generic_utils
import numpy
import os

import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D

import cifar10

batch_size = 32
num_classes = 10
epochs = 50
data_augmentation = False

(x_train, y_train), (x_test, y_test) = cifar10.load_data()
y_train, y_test = [np_utils.to_categorical(x) for x in (y_train, y_test)]
print('x_train shape:', x_train.shape)
print('y_train shape:', y_train.shape)
print(x_train.shape[0], 'train samples')
print(x_test.shape[0], 'test samples')

# load json and create model
json_file = open("model.json", "r")
loaded_model_json = json_file.read()
json_file.close()
loaded_model = model_from_json(loaded_model_json)
# load weights into new model
loaded_model.load_weights("model.hdf5")
print("Loaded model from disk")

# initiate RMSprop optimizer
opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)

# Let's train the model using RMSprop
loaded_model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

for i in range(1, epochs):
	if not data_augmentation:
	    print('Not using data augmentation.')
	    loaded_model.fit(x_train, y_train,
	              batch_size=batch_size,
	              epochs=1,
	              validation_data=(x_test, y_test),
	              shuffle=True)
	else:
	    print('Using real-time data augmentation.')
	    # This will do preprocessing and realtime data augmentation:
	    datagen = ImageDataGenerator(
	        featurewise_center=False,  # set input mean to 0 over the dataset
	        samplewise_center=False,  # set each sample mean to 0
	        featurewise_std_normalization=False,  # divide inputs by std of the dataset
	        samplewise_std_normalization=False,  # divide each input by its std
	        zca_whitening=False,  # apply ZCA whitening
	        rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
	        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
	        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
	        horizontal_flip=True,  # randomly flip images
	        vertical_flip=False)  # randomly flip images

	    # Compute quantities required for feature-wise normalization
	    # (std, mean, and principal components if ZCA whitening is applied).
	    datagen.fit(x_train)

	    # Fit the model on the batches generated by datagen.flow().
	    loaded_model.fit_generator(datagen.flow(x_train, y_train,
	                                    batch_size=batch_size),
	                        steps_per_epoch=x_train.shape[0] // batch_size,
	                        epochs=epochs,
	                        validation_data=(x_test, y_test))
	# Save trained model
	loaded_model.save('trained_model.hdf5')
	loaded_model.save_weights('trained_weights.hdf5')
	print("Saved trained model")